<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AStarComponentLibrary</name>
    </assembly>
    <members>
        <member name="T:AStarComponentLibrary.AStarAlgorithm.Enums.NamespaceDocEnum">
            <summary>
            The <see cref="N:AStarComponentLibrary.AStarAlgorithm.Enums"/> namespace contains the 
            enumerations used within the <see cref="N:AStarComponentLibrary"/>.
            </summary>
        </member>
        <member name="T:AStarComponentLibrary.AStarAlgorithm.Enums.NodeStatusFlags">
            <summary>
            Path position status of clear, open or closed. 
            </summary>
        </member>
        <member name="F:AStarComponentLibrary.AStarAlgorithm.Enums.NodeStatusFlags.clear">
            <summary>
            Not set, prior to open or closed.
            </summary>
        </member>
        <member name="F:AStarComponentLibrary.AStarAlgorithm.Enums.NodeStatusFlags.open">
            <summary>
            Is in the open state.
            </summary>
        </member>
        <member name="F:AStarComponentLibrary.AStarAlgorithm.Enums.NodeStatusFlags.closed">
            <summary>
            Is in the closed state.
            </summary>
        </member>
        <member name="T:AStarComponentLibrary.AStarAlgorithm.AStarManager">
            <summary>
            The <see cref="T:AStarComponentLibrary.AStarAlgorithm.AStarManager"/> stores Search Requests and marshals requests between 
            caller and internal threading engines.
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarManager.#ctor">
            <summary>
             Default parameterless contructor required for the LateBinding on Xbox.
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarManager.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Creates a new <see cref="T:AStarComponentLibrary.AStarAlgorithm.AStarManager"/> class using default values of 57 for Array-Size, and
            90 for NodeStride.
            </summary>
            <param name="game">Game Instance</param>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarManager.#ctor(Microsoft.Xna.Framework.Game,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new AStar Path Manager Class.
            </summary>
            <param name="game">Game Instance</param>
            <param name="nodeArraySize">The Grid size used for the pathfinding graph; for example, 57 is 57x57 graph.</param>    
            <param name="nodeStride">The distance you want your nodes apart</param> 
            <param name="useDirectionOptimization">Turns On or Off the Direction Algorithm</param> 
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarManager.Initialize">
            <summary>
            Set to capture the NullRefExp Error, which will be thrown by base, since the
            Game instance was not able to be set for the Xbox LateBinding version!
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarManager.CommonInitilization(Microsoft.Xna.Framework.Game)">
            <summary>
            Instantiate all 4 Search Requests Queues, and starts the 3 internal AStar Thread engines.
            </summary>
            <param name="game">Game Instance</param>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarManager.InitAStarEngines(System.Int32)">
            <summary>
            Initializes the AStar engines.
            </summary>
            <param name="nodeArraySize">The Grid size used for the pathfinding graph; for example, 57 is 57x57 graph.</param>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarManager.AStarInterfaces#AStarAlgorithm#IAStarManager#InitAStarEngines(System.Int32)">
            <summary>
            Initializes the AStar engines.
            </summary>
            <param name="nodeArraySize">The Grid size used for the pathfinding graph; for example, 57 is 57x57 graph.</param>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarManager.ReInitAStarArrays(System.Int32)">
            <summary>
            Updates the <see cref="T:AStarComponentLibrary.AStarAlgorithm.AStarManager"/> internal <see cref="N:AStarComponentLibrary"/> 'Neighbors' lists, to now
            be the correct size of the given <paramref name="nodeArraySize"/> value.
            </summary>
            <param name="nodeArraySize">The Grid size used for the pathfinding graph; for example, 57 is 57x57 graph.</param>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarManager.AStarInterfaces#AStarAlgorithm#IAStarManager#ReInitAStarArrays(System.Int32)">
            <summary>
            Updates the <see cref="T:AStarComponentLibrary.AStarAlgorithm.AStarManager"/> internal AStar engines 'Neighbors' lists, to now
            be the correct size of the given <paramref name="nodeArraySize"/> value.
            </summary>
            <param name="nodeArraySize">The Grid size used for the pathfinding graph; for example, 57 is 57x57 graph.</param>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarManager.ClearForLevelReload">
            <summary>
            Clears out all AStar internal arrays.
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarManager.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Calls the internal 'ProcessSearchRequests', to process
            any pathfinding requests stored in the internal search queues.
            </summary>
            <param name="gameTime">Provides a snapshot of timing values.</param>        
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarManager.PumpUpdateThreads">
            <summary>
            Activates any internal threads, which need to be woken up, if
            there are items to be processed in the search queues.
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarManager.WaitForThreadsToFinishCurrentFrame">
            <summary>
            Waits for each Thread AutoEvent to signal its finished
            working for the current frame.
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarManager.FindPath_Init(AStarInterfaces.AStarAlgorithm.IAStarItem)">
            <summary>
            This method is called from the <see cref="T:AStarInterfaces.AStarAlgorithm.IAStarItem"/> class, to add a Search Request to the main Queue.  
            Each 'Update' cycle, all the current request are moved into the their proper Thread queue
            versions.  This separation is done to avoid having to use the 'Lock' thread command, which
            can and will slow down the A* cycles!
            </summary>
            <param name="aStarItem"><see cref="T:AStarInterfaces.AStarAlgorithm.IAStarItem"/> instance</param>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarManager.ProcessSearchRequests">
            <summary>
            Processes the SearchRequests, in the main Queue, and moves them
            to the more specific Thread 'SearchRequests' Queues.  This method is called
            each 'Update' cycle, from the main XNA thread.
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarManager.Dispose">
            <summary>
            Disposes of unmanaged resources.
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarManager.Dispose(System.Boolean)">
            <summary>
            Override dispose to ensure our thread is shutdown.
            </summary>
            <param name="disposing">
            Set to true to release manage and unmanaged resources.
            Set to false to release unmanaged resources.
            </param>
        </member>
        <member name="P:AStarComponentLibrary.AStarAlgorithm.AStarManager.UseDirectionOptimization">
            <summary>
            When 'TRUE', the final pathfinding result from the
            <see cref="N:AStarComponentLibrary"/> will be optimized to remove redundant 
            pathfinding nodes; for example, nodes between straight paths.
            </summary>
        </member>
        <member name="P:AStarComponentLibrary.AStarAlgorithm.AStarManager.IAStarGraph">
            <summary>
             Returns a reference to the internal <see cref="P:AStarComponentLibrary.AStarAlgorithm.AStarManager.IAStarGraph"/> interface.
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.Graph.#ctor(System.Int32)">
            <summary>
             Constructor which initializes internal collections by the <paramref name="nodeArraySize"/> given.
            </summary>
            <param name="nodeArraySize">enter the <see cref="P:AStarComponentLibrary.AStarAlgorithm.AStarGraph.NodeArraySize"/></param>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.Graph.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.Graph.Add(System.Collections.Generic.KeyValuePair{System.Int32,AStarInterfaces.AStarAlgorithm.Structs.PathNode})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
                            </exception>
        </member>
        <member name="P:AStarComponentLibrary.AStarAlgorithm.Graph.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="T:AStarComponentLibrary.AStarAlgorithm.AStarNode2D">
            <summary>
            A node class for doing pathfinding on a 2-dimensional map.
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarNode2D.#ctor">
            <summary>
            Parameterless Constructor for making an empty node.
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarNode2D.#ctor(AStarComponentLibrary.AStarAlgorithm.AStarNode2D,AStarComponentLibrary.AStarAlgorithm.AStarNode2D,System.Single,System.Int32,System.Int32)">
            <summary>
            Constructor for a node in a 2-dimensional map.
            </summary>
            <param name="aParent">Parent of the node</param>
            <param name="aGoalNode">Goal node</param>
            <param name="aCost">Accumulative cost</param>
            <param name="ax">X-coordinate</param>
            <param name="ay">Y-coordinate</param>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarNode2D.IsSameState(AStarComponentLibrary.AStarAlgorithm.AStarNode2D)">
            <summary>
            Determines whether the current node is the same state as the one passed.
            </summary>
            <param name="aNode">AStarNode to compare the current node to</param>
            <returns>Returns true if they are the same state</returns>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarNode2D.IsGoal">
            <summary>
            Determines whether the current node is the goal.
            </summary>
            <returns>Returns true if current node is the goal</returns>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarNode2D.PackFloat(System.Single,Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle@)">
            <summary>
            Packs a float into a HalfSingle to save 50% memory.
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarNode2D.UnPackFloat(Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle@)">
            <summary>
            UnPacks an internal HalfSingle to be a Float.
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarNode2D.Equals(AStarComponentLibrary.AStarAlgorithm.AStarNode2D)">
             <summary>
             Determines whether the current node is the same state as the one passed.
             </summary>
            <param name="astarNode">Item to compare to</param>
            <returns>True/False of result.</returns>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarNode2D.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarNode2D.CompareTo(AStarComponentLibrary.AStarAlgorithm.AStarNode2D)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: 
                                Value 
                                Meaning 
                                Less than zero 
                                This object is less than the <paramref name="astarNode"/> parameter.
                                Zero 
                                This object is equal to <paramref name="astarNode"/>. 
                                Greater than zero 
                                This object is greater than <paramref name="astarNode"/>. 
            </returns>
            <param name="astarNode">An object to compare with this object.</param>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarNode2D.Dispose(System.Boolean)">
            <summary>
             Disposes of unmanaged resources.
            </summary>
            <param name="disposing">Is this final dispose?</param>
        </member>
        <member name="P:AStarComponentLibrary.AStarAlgorithm.AStarNode2D.Neighbors">
            <summary>
            Returns the collection of Neighbors for the given Node.
            </summary>
        </member>
        <member name="P:AStarComponentLibrary.AStarAlgorithm.AStarNode2D.X">
            <summary>
            The X-coordinate of the node
            </summary>
        </member>
        <member name="P:AStarComponentLibrary.AStarAlgorithm.AStarNode2D.Y">
            <summary>
            The Y-coordinate of the node
            </summary>
        </member>
        <member name="P:AStarComponentLibrary.AStarAlgorithm.AStarNode2D.UnScaledX">
            <summary>
            The X value, without the NodeStride scaling.
            </summary>
        </member>
        <member name="P:AStarComponentLibrary.AStarAlgorithm.AStarNode2D.UnScaledY">
            <summary>
            The Y Value, without the NodeStride scaling.
            </summary>
        </member>
        <member name="P:AStarComponentLibrary.AStarAlgorithm.AStarNode2D.TilePosition">
            <summary>
            Returns the internal _fx/_fy as a Point.
            </summary>
        </member>
        <member name="P:AStarComponentLibrary.AStarAlgorithm.AStarNode2D.Parent">
            <summary>
            The parent of the node.
            </summary>
        </member>
        <member name="P:AStarComponentLibrary.AStarAlgorithm.AStarNode2D.Cost">
            <summary>
            The accumulative cost of the path until now.
            </summary>
        </member>
        <member name="P:AStarComponentLibrary.AStarAlgorithm.AStarNode2D.GoalEstimate">
            <summary>
            The estimated cost to the goal from here.
            </summary>
        </member>
        <member name="P:AStarComponentLibrary.AStarAlgorithm.AStarNode2D.TotalCost">
            <summary>
            The cost plus the estimated cost to the goal from here.
            </summary>
        </member>
        <member name="P:AStarComponentLibrary.AStarAlgorithm.AStarNode2D.GoalNode">
            <summary>
            The goal node.
            </summary>
        </member>
        <member name="T:AStarComponentLibrary.AStarAlgorithm.AStarGraph">
            <summary>
            AStarGraph is used to store the data relevant to a particular 
            game map; for example, tile costs, occupied references, and unusable blocked
            tiles.  Ultimately, this graph is then read and used during pathfinding searches.
            </summary>
        </member>
        <member name="F:AStarComponentLibrary.AStarAlgorithm.AStarGraph.GoalNodeTransformations">
            <summary>
            This Array is used to store the 49 goalNode Transformations for Pathfinding.
            It is called upon when a group of units are selected and 'right-clicked' on
            the terrain to be moved in the 'Player' class.
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarGraph.CreatePathfindingGraph">
            <summary>
            Initializes the internal 'Graph' array, to the size
            given in the 'NodeArraySize' Property.  
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarGraph.GetPathfindingGraph">
            <summary>
            Returns a List of the internal PathNode items, used primarily
            for the TerrainStorage to save with the current map.
            </summary>
            <returns>Collection of PathNodeforSaving structs</returns>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarGraph.SetCostToPos(System.Int32,System.Int32,System.Single,System.Int32)">
            <summary>
            Adds Cost data to Graph for current x,y Position and all
            nodes surrounding the current x,y Position, determine by size.
            </summary>
            <param name="x">Graph X-location value.</param>
            <param name="y">Graph Y-location value.</param>
            <param name="cost">Cost to set</param>
            <param name="size">1 or greater; used to fill multiple tiles with same cost</param>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarGraph.RemoveCostAtPos(System.Int32,System.Int32,System.Int32)">
            <summary>
            Removes Cost data from Graph for current x,y Position and all
            nodes surrounding the current x,y Position, determine by size.
            </summary>
            <param name="inX">Graph X-location value.</param>
            <param name="inY">Graph Y-location value.</param>
            <param name="size">1 or greater; used to fill multiple tiles with same cost</param>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarGraph.SetOccupiedByToIndex(Microsoft.Xna.Framework.Point@,AStarInterfaces.AStarAlgorithm.Enums.NodeScale,AStarInterfaces.AStarAlgorithm.Enums.PathNodeType,System.Object)">
            <summary>
            Sets OccupiedBy object into Graph for current index given; determine by 'NodeScale'.
            When A* is searching and getting the next 8 successors to a current graphNode, if 
            the Node's OccupiedBy is not Null, it will not be included in the Search.
            This is used for Unit Collision detection as they PathFind accross the Terrain.   
            </summary>
            <param name="index">Graph X/Y index</param>
            <param name="nodeScale">Used to scale given value</param>
            <param name="pathNodeType">PathNodeType; like GroundItem or Air.</param>
            <param name="occupiedBy">Reference to object to save into index position.</param>
            <returns>True/False of success.</returns>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarGraph.GetOccupantsForRectangle(Microsoft.Xna.Framework.Rectangle@,System.Int32,AStarInterfaces.AStarAlgorithm.Enums.PathNodeType,System.Object[]@,System.Int32@)">
            <summary>
            Given a Rectangle search area, this method will return all 'Occupants' within the search are, where
            they are 'IsAlive', and not of the 'AvoidSceneItem'.  The existing 'Occupants' are populated into the
            given List 'Occupants'.
            </summary>
            <param name="searchRectangle">Search rectangle of the SceneItem's ViewRadius</param>
            <param name="avoidSceneItem">SceneItemNumber to exclude from list</param>
            <param name="pathNodeType">PathNodeType; like GroundItem or Air.</param>
            <param name="occupiants">Array of occupants.</param>
            <param name="occupiantsFound">Number of occupants found</param>
            <returns>True/False of success.</returns>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarGraph.GetOccupiedByAtIndex(Microsoft.Xna.Framework.Point@,AStarInterfaces.AStarAlgorithm.Enums.NodeScale,AStarInterfaces.AStarAlgorithm.Enums.PathNodeType,System.Object@)">
            <summary>
            Gets the 'OccupiedBy' item, at the given graph Index position.
            </summary>
            <param name="index">Graph X/Y index</param>
            <param name="nodeScale">Used to scale given value</param>
            <param name="pathNodeType">PathNodeType; like GroundItem or Air.</param>
            <param name="occupiedBy">(OUT) Reference to object</param>
            <returns>True/False of success.</returns>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarGraph.RemoveOccupiedByAtIndex(Microsoft.Xna.Framework.Point@,AStarInterfaces.AStarAlgorithm.Enums.NodeScale,AStarInterfaces.AStarAlgorithm.Enums.PathNodeType)">
            <summary>
            Removes the reference for a 'OccupiedBy' item, at the given graph Index position.
            </summary>
            <param name="index">Graph X/Y index</param>
            <param name="nodeScale">Used to scale given value</param>
            <param name="pathNodeType">PathNodeType; like GroundItem or Air.</param>
            <returns>True/False of success.</returns>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarGraph.IsNodeBlocked(AStarInterfaces.AStarAlgorithm.Enums.NodeScale,System.Int32,System.Int32)">
            <summary>
             Checks if Node is Blocked, which means it is not useable; -1 is unaccessable areas, while -2 is blocked by buildings!
            </summary>
            <param name="nodeScale">Used to scale given value</param>
            <param name="x">Graph X-index</param>
            <param name="y">Graph Y-index</param>
            <returns>True/False of success.</returns>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarGraph.IsNodeBlockedForCursor(AStarInterfaces.AStarAlgorithm.Enums.NodeScale,System.Int32,System.Int32)">
            <summary>
            Only checks for the -1 costs value, which is used to block parts of the map from any access!
            </summary>
            <param name="nodeScale">Used to scale given value</param>
            <param name="x">Graph X-index</param>
            <param name="y">Graph Y-index</param>
            <returns>True/False of success.</returns>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarGraph.IsPathNodeSectionBlocked(System.Int32,System.Int32,System.Int32,AStarInterfaces.AStarAlgorithm.Enums.BlockedType)">
            <summary>
             Check if all Nodes, within given Size, are Blocked.
            </summary>
            <param name="x">Graph X-index</param>
            <param name="y">Graph Y-index</param>
            <param name="size">Size of area to check, where the Index point becomes the center.</param>
            <param name="blockedType">BlockedType enum value to check for.</param>
            <returns>True/False of success.</returns>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarGraph.GetNewGoalNodeAtHalfDistance(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets a new GoalNode, which should be roughly half the distance
            of the given node. 
            </summary>
            <param name="oldGoalPosition">Original goal position</param>
            <param name="startPosition">start position</param>
            <param name="newGoalPosition">New half-way goal position</param>
            <returns>True/False of success.</returns>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarGraph.FindPossibleNeighborNode(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Using a blockedPosition node given, this method will search all 8 surrounding neighbor nodes
            , and will return an unblocked neighbor node to use, if found.
            </summary>
            <param name="blockedPosition">Node to search neighbors from</param>
            <param name="neighborNode">(Out) New Neighbor node to use</param>
            <returns>True/False of success</returns>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarGraph.GetNodeCost(System.Int32,System.Int32,System.Single@)">
            <summary>
            Returns the Node Cost from PathNode Struct at given X/Y index. 
            </summary>
            <param name="x">Graph X-index</param>
            <param name="y">Graph Y-index</param>
            <param name="nodeCost">(OUT) Node cost at given position</param>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarGraph.IsOccupied(System.Int32,System.Int32,AStarInterfaces.AStarAlgorithm.Enums.PathNodeType)">
            <summary>
            Checks if PathNode X/Y index, is Occupied with Object.
            </summary>
            <param name="x">Graph X-index</param>
            <param name="y">Graph Y-index</param>
            <param name="pathNodeType">PathNodeType; like GroundItem or Air.</param>
            <returns>True/False of success.</returns>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarGraph.ContainsKey(System.Int32,System.Int32)">
            <summary>
            Checks if the given x/y key is already stored
            in the internal dictionary.
            </summary>
            <param name="x">Graph X-index</param>
            <param name="y">Graph Y-index</param>
            <returns>True/False of success</returns>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarGraph.AddOrUpdatePathNode(System.Int32,System.Int32,System.Single,System.Int32)">
            <summary>
            Checks the internal Dictionary for a given X/Y index Key, to see if the
            'PathNode' already exists or needs to be added as a new 'PathNode'.
            </summary>
            <param name="x">Graph X-index</param>
            <param name="y">Graph Y-index</param>
            <param name="cost">Cost value to set</param>
            <param name="key">Key to check</param>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarGraph.PopulateGoalNodesTransformationArray">
            <summary>
            Populates the goalNodesTransformation Array, which is used for the pathFinding.
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarGraph.LoadAStarGraphBlockingData(System.Collections.Generic.List{AStarInterfaces.AStarAlgorithm.Structs.PathNodeForSaving},System.Int32)">
            <summary>
            Loads the AStarGraph 'BlockingData' back into memory; should be called from the 'TerrainStorageRoutines'
            class when loading.
            </summary>
            <param name="tmpBlockingData">Collection of PathNodeForSaving struct</param>
            <param name="pathNodeStride">PathNodeStride</param>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarGraph.ClearForLevelReload">
            <summary>
            Clears internal arrays for new levels.
            </summary>
        </member>
        <member name="P:AStarComponentLibrary.AStarAlgorithm.AStarGraph.IsGraphNullOrEmpty">
            <summary>
            Checks if the internal <see cref="T:AStarComponentLibrary.AStarAlgorithm.Graph"/> is null or empty.
            </summary>
        </member>
        <member name="P:AStarComponentLibrary.AStarAlgorithm.AStarGraph.IsGraphNull">
            <summary>
            Checks if the internal <see cref="T:AStarComponentLibrary.AStarAlgorithm.Graph"/> is null.
            </summary>
        </member>
        <member name="P:AStarComponentLibrary.AStarAlgorithm.AStarGraph.IsGraphEmpty">
            <summary>
            Checks if the internal <see cref="T:AStarComponentLibrary.AStarAlgorithm.Graph"/> is empty.
            </summary>
        </member>
        <member name="P:AStarComponentLibrary.AStarAlgorithm.AStarGraph.NodeStride">
            <summary>
            Stores the Graph's Stride, or distance between
            a tile node.
            </summary>
        </member>
        <member name="P:AStarComponentLibrary.AStarAlgorithm.AStarGraph.NodeArraySize">
            <summary>
            Stores the graph's size, or number of nodes in
            the given graph; for example, 57 is 57x57.
            </summary>
        </member>
        <member name="T:AStarComponentLibrary.AStarAlgorithm.Enums.NamespaceDoc">
            <summary>
            The <see cref="N:AStarComponentLibrary.AStarAlgorithm.Enums"/> namespace contains the enum
            <see cref="T:AStarComponentLibrary.AStarAlgorithm.Enums.SolutionState"/>.
            </summary>
        </member>
        <member name="T:AStarComponentLibrary.AStarAlgorithm.Enums.SolutionState">
            <summary>
             SolutionState Enum, refers to the current state the pathfinding
             item is in, within the thread engines.
            </summary>
        </member>
        <member name="F:AStarComponentLibrary.AStarAlgorithm.Enums.SolutionState.Ready">
            <summary>
             <see cref="T:AStarInterfaces.AStarAlgorithm.IAStarItem"/> solution is ready, with a valid path to use.
            </summary>
        </member>
        <member name="F:AStarComponentLibrary.AStarAlgorithm.Enums.SolutionState.InProgress">
            <summary>
             <see cref="T:AStarInterfaces.AStarAlgorithm.IAStarItem"/> solution is in progress.
            </summary>
        </member>
        <member name="F:AStarComponentLibrary.AStarAlgorithm.Enums.SolutionState.NoSolution">
            <summary>
             <see cref="T:AStarInterfaces.AStarAlgorithm.IAStarItem"/> ran solution, and no path was found.
            </summary>
        </member>
        <member name="T:LicenseHelper">
            <summary>
            	Helper class to quickly add licensing to your project. 
            </summary>
        </member>
        <member name="M:LicenseHelper.System#IDisposable#Dispose">
            <summary>
            Make sure all license resources are disposed and any pending data is persisted.
            </summary>
        </member>
        <member name="M:LicenseHelper.Check(System.Boolean)">
            <summary>
            	Check for a valid license but don't throw any exceptions if a license cannot be found.
            </summary>
            <param name = "silent">Indicates if DeployLX should validate without showing any forms to the user.</param>
            <returns>Returns true if a valid license was found, otherwise false.</returns>
        </member>
        <member name="M:LicenseHelper.Required">
            <summary>
            	Asks DeployLX to assert that the application has a valid license.
            </summary>
            <exception cref="T:DeployLX.Licensing.v4.NoLicenseException">Thrown when a valid license could not be obtained. See exception ValidationRecords for details.</exception>
        </member>
        <member name="M:LicenseHelper.Required(System.Boolean)">
            <summary>
            	Asks DeployLX to assert that the application has a valid license.
            </summary>
            <exception cref="T:DeployLX.Licensing.v4.NoLicenseException">Thrown when a valid license could not be obtained. See exception ValidationRecords for details.</exception>
            <param name="silent">Indicates if DeployLX should validate without showing any forms to the user.</param>
        </member>
        <member name="M:LicenseHelper.RecordLicenseError(DeployLX.Licensing.v4.NoLicenseException)">
            <summary>
            Called when a valid license could not be found when calling <see cref="M:LicenseHelper.Required"/> or <see cref="M:LicenseHelper.Check(System.Boolean)"/>.
            </summary>
            <param name="ex">Exception reported by DeployLX.</param>
        </member>
        <member name="M:LicenseHelper.GetLicenseInfo">
            <summary>
            	Gets a string representation of the license ownership data.
            </summary>
        </member>
        <member name="M:LicenseHelper.Activate">
            <summary>
            Activates the license on the current machine.
            </summary>
            <returns>
            Returns true if the license was activated, otherwise false.
            </returns>
        </member>
        <member name="M:LicenseHelper.Deactivate">
            <summary>
            Deactivates the license from the current machine.
            </summary>
            <returns>
            Returns true if the license was deacivated, otherwise false.
            </returns>
        </member>
        <member name="M:LicenseHelper.ReShowRegistrationForm">
            <summary>
            Shows the registration form to the user so they can enter a new serial number. Might be used
            to upgrade to a better edition or fix a wrongly entered serial number.
            </summary>
            <returns>
            Returns true if the registration unlocked a new license, otherwise false.
            </returns>
        </member>
        <member name="P:LicenseHelper.SerialNumber">
            <summary>
            Gets the current serial number, if any.
            </summary>
        </member>
        <member name="P:LicenseHelper.UserName">
            <summary>
            Gets the current user name, if any.
            </summary>
        </member>
        <member name="P:LicenseHelper.IsTrial">
            <summary>
            Gets a value that indicates if the current license is for a trial edition.
            </summary>
        </member>
        <member name="P:LicenseHelper.IsActivated">
            <summary>
            Gets a value that indicates if the current license has an Activation limit and it has
            been activated.
            </summary>
        </member>
        <member name="P:LicenseHelper.HasActivation">
            <summary>
            Gets a value that indicates if the current license has an Activation limit.
            </summary>
        </member>
        <member name="P:LicenseHelper.LastError">
            <summary>
            Gets a reference to the last license validation error.
            </summary>
        </member>
        <member name="T:AStarComponentLibrary.AStarAlgorithm.NamespaceDoc">
            <summary>
            The <see cref="N:AStarComponentLibrary.AStarAlgorithm"/> namespace contains the classes
            which make up the entire <see cref="T:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm"/>.
            </summary>
        </member>
        <member name="T:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm">
            <summary>
            Class for performing A* pathfinding.
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.#ctor(System.Int32)">
            <summary>
            Initalizes all three internal AStar Engines.
            </summary>
            <param name="nodeArraySize">The Grid size used for the pathfinding graph; for example, <see cref="P:AStarComponentLibrary.AStarAlgorithm.AStarGraph.NodeArraySize"/> .</param>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.ReInitMapTileArrays(System.Int32)">
            <summary>
            Clears out all internal neighbor arrays, and re-populates 
            the neighbors using the new 'nodeArraySize' given.
            </summary>
            <param name="nodeArraySize">The Grid size used for the pathfinding graph; for example, <see cref="P:AStarComponentLibrary.AStarAlgorithm.AStarGraph.NodeArraySize"/>.</param>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.InitPossibleNeighborsList">
            <summary>
            Initializes the List of 8 possible neighbor points, with move costs. This is
            used as a standard template when creating the neighbors array.
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.InitAStarMapTileNodes(System.Collections.Generic.IList{AStarComponentLibrary.AStarAlgorithm.AStarNode2D})">
            <summary>
            Updates the given <paramref name="aStarMapTiles"/> collection, with the proper
            neighbor connections, using information obtained from the <see cref="T:AStarComponentLibrary.AStarAlgorithm.AStarGraph"/>, 
            like the node cost or if a node is blocked.
            </summary>
            <param name="aStarMapTiles">The <paramref name="aStarMapTiles"/> collection to populate</param>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.UpdateNeighborTileConnections">
            <summary>
            Will update all three <see cref="T:AStarComponentLibrary.AStarAlgorithm.AStarNode2D"/> collections with the proper
            neighbor connections. Should be called anytime a new <see cref="T:AStarInterfaces.AStarAlgorithm.IAStarItem"/>
            changes the layout in the <see cref="T:AStarComponentLibrary.AStarAlgorithm.AStarGraph"/>!
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.UpdateNeighborTileConnections(System.Collections.Generic.IList{AStarComponentLibrary.AStarAlgorithm.AStarNode2D})">
            <summary>
            Updates the Neighbor connections, and should be called anytime a new <see cref="T:AStarInterfaces.AStarAlgorithm.IAStarItem"/> changes
            the layout in the <see cref="T:AStarComponentLibrary.AStarAlgorithm.AStarGraph"/>!
            </summary>
            <param name="aStarMapTiles">The AStarMapTiles collection to populate</param>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.GetTile(System.Collections.Generic.IList{AStarComponentLibrary.AStarAlgorithm.AStarNode2D},System.Int32,System.Int32,AStarComponentLibrary.AStarAlgorithm.AStarNode2D@)">
            <summary>
            Retrieves a specific <see cref="T:AStarComponentLibrary.AStarAlgorithm.AStarNode2D"/>, from the given 'AStarMapTiles' collection,
            for the given X/Y grid location.
            </summary>
            <param name="aStarMapTiles">The AStarMapTiles collection to search</param>
            <param name="x">Grid X location</param>
            <param name="y">Grid Y location</param>
            <param name="tileToRetrieve">(OUT) AStarNode2D tile</param>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.GetTile(System.Collections.ObjectModel.ReadOnlyCollection{AStarComponentLibrary.AStarAlgorithm.AStarNode2D},System.Int32,System.Int32,AStarComponentLibrary.AStarAlgorithm.AStarNode2D@)">
            <summary>
            Retrieves a specific <see cref="T:AStarComponentLibrary.AStarAlgorithm.AStarNode2D"/>, from the given 'AStarMapTiles' collection,
            for the given X/Y grid location.
            </summary>
            <param name="aStarMapTiles">The AStarMapTiles (read-only) collection to search</param>
            <param name="x">Grid X location</param>
            <param name="y">Grid Y location</param>
            <param name="tileToRetrieve">(OUT) AStarNode2D tile</param>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.FindPath_SetNodes1(AStarInterfaces.AStarAlgorithm.IAStarItem,AStarInterfaces.AStarAlgorithm.Enums.AdjToClosestNode)">
            <summary>
            Initializes settings, like the neighbors connections and beginning and ending goal tiles, to 
            begin a new pathfinding search.  This method is directly called by the internal <see cref="T:AStarComponentLibrary.AStarAlgorithm.AStarManager"/>
            thread engine.
            </summary>
            <param name="aStarItem"><see cref="T:AStarInterfaces.AStarAlgorithm.IAStarItem"/> Interface instance</param>
            <param name="adjForClosestNode">When 'On', returns the closest tile node for the given 'Goal' and 'Start' nodes, using the eight nodes which surround
            a given 'Goal' or 'Start' node.</param>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.FindPath_SetNodes2(AStarInterfaces.AStarAlgorithm.IAStarItem,AStarInterfaces.AStarAlgorithm.Enums.AdjToClosestNode)">
            <summary>
            Initializes settings, like the neighbors connections and beginning and ending goal tiles, to 
            begin a new pathfinding search.  This method is directly called by the internal <see cref="T:AStarComponentLibrary.AStarAlgorithm.AStarManager"/>
            thread engine.
            </summary>
            <param name="aStarItem"><see cref="T:AStarInterfaces.AStarAlgorithm.IAStarItem"/> Interface instance</param>
            <param name="adjForClosestNode">When 'On', returns the closest tile node for the given 'Goal' and 'Start' nodes, using the eight nodes which surround
            a given 'Goal' or 'Start' node.</param>     
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.FindPath_SetNodes3(AStarInterfaces.AStarAlgorithm.IAStarItem,AStarInterfaces.AStarAlgorithm.Enums.AdjToClosestNode)">
            <summary>
            Initializes settings, like the neighbors connections and beginning and ending goal tiles, to 
            begin a new pathfinding search.  This method is directly called by the internal <see cref="T:AStarComponentLibrary.AStarAlgorithm.AStarManager"/>
            thread engine.
            </summary>
            <param name="aStarItem"><see cref="T:AStarInterfaces.AStarAlgorithm.IAStarItem"/> Interface instance</param>
            <param name="adjForClosestNode">When 'On', returns the closest tile node for the given 'Goal' and 'Start' nodes, using the eight nodes which surround
            a given 'Goal' or 'Start' node.</param>        
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.ConvertCordsToPathScale(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Scales a Vector3 Position from Map-Coordinates, down to Path-Coordinates.
            Ex: If Map Coordinates are (1250, 0, 3150), and PathStride is 90, then the 
                result would be 1250/90 and 3150/90 = (14, 0, 35).
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.GetClosestCornerNode(System.Int32@,System.Int32@,System.Int32@,System.Int32@,Microsoft.Xna.Framework.Vector2@,AStarInterfaces.AStarAlgorithm.Enums.PathNodeType)">
            <summary>
            Helper Function to find the 4 corners surrounding the 
            position picked, and then determining which is the closest to the
            'Goal' node Position given, using the Distance formula of Vector.  
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.FindPath_CycleOnce1(AStarInterfaces.AStarAlgorithm.IAStarItem)">
            <summary>
            Finds the shortest path from the start node to the goal node,
            using the modified TemporalWar's AStar algorithm. (Thread-1).
            </summary>     
            <param name="aStarItemCaller"><see cref="T:AStarInterfaces.AStarAlgorithm.IAStarItem"/> instance</param>       
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.FindPath_CycleOnce2(AStarInterfaces.AStarAlgorithm.IAStarItem)">
            <summary>
            Finds the shortest path from the start node to the goal node,
            using the modified TemporalWar's AStar algorithm (Thread-2).
            </summary>  
            <param name="aStarItemCaller"><see cref="T:AStarInterfaces.AStarAlgorithm.IAStarItem"/> instance</param>           
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.FindPath_CycleOnce3(AStarInterfaces.AStarAlgorithm.IAStarItem)">
            <summary>
            Finds the shortest path from the start node to the goal node,
            using the modified TemporalWar's AStar algorithm (Thread-3).
            </summary>  
            <param name="aStarItemCaller"><see cref="T:AStarInterfaces.AStarAlgorithm.IAStarItem"/> instance</param>             
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.ManhattanDistance(Microsoft.Xna.Framework.Point@,Microsoft.Xna.Framework.Point@)">
            <summary>
            Used when search can only move vertically and 
            horizontally.  
            
            (Fastest of the Distance formulas!)
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.EuclideanDistance(Microsoft.Xna.Framework.Point@,Microsoft.Xna.Framework.Point@)">
            <summary>
            Used when search can move at any angle.
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.DiagonalDistance(Microsoft.Xna.Framework.Point@,Microsoft.Xna.Framework.Point@)">
            <summary>
            Used when the search can move in 8 directions.
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.FinalizePath(System.Collections.Generic.List{AStarComponentLibrary.AStarAlgorithm.AStarNode2D},AStarInterfaces.AStarAlgorithm.IAStarItem,System.Boolean)">
            <summary>
            Checks if DirectionOptimization was desired; otherwise, it copies the solution to 
            the FinalSolutionPath Array.
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.OptimizePath(System.Collections.Generic.List{AStarComponentLibrary.AStarAlgorithm.AStarNode2D},ParallelTasksComponent.LocklessQueue.LocklessQueue{Microsoft.Xna.Framework.Vector3},System.Int32,System.Int32)">
            <summary>
            Finalize Path Solution; check to see if the OptimizePath flag was set for optimization.
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.ClearAll_AStar_Arrays1">
            <summary>
            Clears out all AStar Arrays, returning any nodes back to
            the memory pools.
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.ClearAll_AStar_Arrays2">
            <summary>
            Clears out all AStar Arrays, returning any nodes back to
            the memory pools.
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.ClearAll_AStar_Arrays3">
            <summary>
            Clears out all AStar Arrays, returning any nodes back to
            the memory pools.
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.ClearForLevelReload">
            <summary>
            Clears out all AStar internal arrays.
            </summary>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.Dispose(System.Boolean)">
            <summary>
            Disposes of unmanaged resources.
            </summary>
            <param name="disposing">Is this final dispose?</param>
        </member>
        <member name="M:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.Dispose">
            <summary>
            Disposes of unmanaged resources.
            </summary>
        </member>
        <member name="P:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.Solution1">
            <summary>
            Holds the solution after pathfinding is done. <see>FindPath()</see>
            </summary>
        </member>
        <member name="T:AStarComponentLibrary.AStarAlgorithm.AStarAlgorithm.Corner">
            <summary>
            Corner struct
            </summary>
        </member>
    </members>
</doc>
