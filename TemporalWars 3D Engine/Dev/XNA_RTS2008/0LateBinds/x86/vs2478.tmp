<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AStarInterfaces</name>
    </assembly>
    <members>
        <member name="T:AStarInterfaces.AStarAlgorithm.Structs.PathNode">
            <summary>
            The <see cref="T:AStarInterfaces.AStarAlgorithm.Structs.PathNode"/> structure contains the world position with relevant cost and occupied data.
            </summary>
        </member>
        <member name="F:AStarInterfaces.AStarAlgorithm.Structs.PathNode.x">
            <summary>
            The world's X cooridinate.
            </summary>
        </member>
        <member name="F:AStarInterfaces.AStarAlgorithm.Structs.PathNode.y">
            <summary>
            The world's Y cooridinate.
            </summary>
        </member>
        <member name="F:AStarInterfaces.AStarAlgorithm.Structs.PathNode.cost">
            <summary>
            The <see cref="T:AStarInterfaces.AStarAlgorithm.Structs.PathNode"/>'s cost or value in pathfinding determiniation.
            </summary>
        </member>
        <member name="F:AStarInterfaces.AStarAlgorithm.Structs.PathNode.OccupiedByGround">
            <summary>
            The <see cref="T:AStarInterfaces.AStarAlgorithm.Structs.PathNode"/>'s stored reference to a ground scene item.
            </summary>
        </member>
        <member name="F:AStarInterfaces.AStarAlgorithm.Structs.PathNode.OccupiedByAir">
            <summary>
            The <see cref="T:AStarInterfaces.AStarAlgorithm.Structs.PathNode"/>'s stored reference to an air scene item.
            </summary>
        </member>
        <member name="T:AStarInterfaces.AStarAlgorithm.Structs.NamespaceDoc">
            <summary>
            The <see cref="N:AStarInterfaces.AStarAlgorithm.Structs"/> namespace contains the classes
            which make up the entire set of structs for <see cref="N:AStarInterfaces.AStarAlgorithm"/>.
            </summary>
        </member>
        <member name="T:AStarInterfaces.AStarAlgorithm.Structs.PathNodeForSaving">
            <summary>
            Struct to save <see cref="T:AStarInterfaces.AStarAlgorithm.Structs.PathNode"/>.
            </summary>
        </member>
        <member name="P:AStarInterfaces.AStarAlgorithm.Structs.PathNodeForSaving.X">
            <summary>
            The world's X cooridinate.
            </summary>
        </member>
        <member name="P:AStarInterfaces.AStarAlgorithm.Structs.PathNodeForSaving.Y">
            <summary>
            The world's Y cooridinate.
            </summary>
        </member>
        <member name="P:AStarInterfaces.AStarAlgorithm.Structs.PathNodeForSaving.Cost">
            <summary>
            The <see cref="T:AStarInterfaces.AStarAlgorithm.Structs.PathNode"/>'s cost or value in pathfinding determiniation.
            </summary>
        </member>
        <member name="T:AStarInterfaces.AStarAlgorithm.Enums.NodeScale">
            <summary>
            When give a terrain XY coordinate the <see cref="F:AStarInterfaces.AStarAlgorithm.Enums.NodeScale.TerrainScale"/> returns the same value, while the <see cref="F:AStarInterfaces.AStarAlgorithm.Enums.NodeScale.AStarPathScale"/> rounds the
            terrain XY coordinates to the nearest A* <see cref="T:AStarInterfaces.AStarAlgorithm.Structs.PathNode"/>. 
            </summary>
        </member>
        <member name="F:AStarInterfaces.AStarAlgorithm.Enums.NodeScale.TerrainScale">
            <summary>
            Actual distance between each vertices on the terrain.
            </summary>
        </member>
        <member name="F:AStarInterfaces.AStarAlgorithm.Enums.NodeScale.AStarPathScale">
            <summary>
            The distance betweeen each <see cref="T:AStarInterfaces.AStarAlgorithm.Structs.PathNode"/> 
            </summary>
        </member>
        <member name="T:AStarInterfaces.AStarAlgorithm.Enums.NamespaceDoc">
            <summary>
            The <see cref="N:AStarInterfaces.AStarAlgorithm.Enums"/> namespace contains the classes
            which make up the entire set of Enums for <see cref="N:AStarInterfaces.AStarAlgorithm"/>.
            </summary>
        </member>
        <member name="T:AStarInterfaces.AStarAlgorithm.Enums.AdjToClosestNode">
            <summary>
            When 'On', returns the closest tile node for the given 'Goal' and 'Start' nodes, using the eight nodes which surround
            a given 'Goal' or 'Start' node.
            </summary>
        </member>
        <member name="F:AStarInterfaces.AStarAlgorithm.Enums.AdjToClosestNode.On">
            <summary>
            Enables the closest tile node optimization.
            </summary>
        </member>
        <member name="F:AStarInterfaces.AStarAlgorithm.Enums.AdjToClosestNode.Off">
            <summary>
            Disables the closest tile node optimization.
            </summary>
        </member>
        <member name="T:AStarInterfaces.AStarAlgorithm.IAStarManager">
            <summary>
            <see cref="T:AStarInterfaces.AStarAlgorithm.IAStarManager"/> stores SearchRequests and marshals requests between 
            caller and internal threading engines.
            </summary>
        </member>
        <member name="M:AStarInterfaces.AStarAlgorithm.IAStarManager.FindPath_Init(AStarInterfaces.AStarAlgorithm.IAStarItem)">
            <summary>
            This method is called from the <see cref="T:AStarInterfaces.AStarAlgorithm.IAStarItem"/> class, to add a Search Request to the main Queue.  
            Each 'Update' cycle, all the current request are moved into the their proper Thread queue
            versions.  This separation is done to avoid having to use the 'Lock' thread command, which
            can and will slow down the A* cycles!
            </summary>
            <param name="aStarItem"><see cref="T:AStarInterfaces.AStarAlgorithm.IAStarItem"/> instance</param>
        </member>
        <member name="M:AStarInterfaces.AStarAlgorithm.IAStarManager.ClearForLevelReload">
            <summary>
            Clears out all AStar internal arrays.
            </summary>
        </member>
        <member name="M:AStarInterfaces.AStarAlgorithm.IAStarManager.InitAStarEngines(System.Int32)">
            <summary>
             Initializes the AStar engines.
             </summary>
             <param name="nodeArraySize">The Grid size used for the pathfinding graph; for example, 57 is 57x57 graph.</param>
        </member>
        <member name="M:AStarInterfaces.AStarAlgorithm.IAStarManager.ReInitAStarArrays(System.Int32)">
            <summary>
            Updates the <see cref="T:AStarInterfaces.AStarAlgorithm.IAStarManager"/> internal AStarComponentLibrary 'Neighbors' collection, to now
            be the correct size of the given <paramref name="nodeArraySize"/> value.
            </summary>
            <param name="nodeArraySize">The Grid size used for the pathfinding graph; for example, 57 is 57x57 graph.</param>
        </member>
        <member name="P:AStarInterfaces.AStarAlgorithm.IAStarManager.IAStarGraph">
            <summary>
            Instance of <see cref="P:AStarInterfaces.AStarAlgorithm.IAStarManager.IAStarGraph"/>
            </summary>
        </member>
        <member name="T:AStarInterfaces.AStarAlgorithm.IAStarItem">
            <summary>
            The <see cref="T:AStarInterfaces.AStarAlgorithm.IAStarItem"/> item is an extension for the SceneItem, which provides
            pathfinding capabilities by using the A* component for searches.  
            Furthermore, the actual processing and lower level work for moving
            the units in the game world is accomplished in this class.
            </summary>
        </member>
        <member name="M:AStarInterfaces.AStarAlgorithm.IAStarItem.AStarInstanceSearchComplete(AStarInterfaces.AStarAlgorithm.IAStarItem,System.Boolean)">
            <summary>
            Search Complete method, called by the 'CycleOnce' AStar engine, when search complete.
            </summary>
            <param name="astarItem"><see cref="T:AStarInterfaces.AStarAlgorithm.IAStarItem"/> instance</param>
            <param name="solutionFound">Solution found?</param>
        </member>
        <member name="P:AStarInterfaces.AStarAlgorithm.IAStarItem.GoalPosition">
             <summary>
             Vector3 goal position for the given unit.
            </summary>
        </member>
        <member name="P:AStarInterfaces.AStarAlgorithm.IAStarItem.PathNodePosition">
             <summary>
             Current A-Star node position in game world.
            </summary>
        </member>
        <member name="P:AStarInterfaces.AStarAlgorithm.IAStarItem.SolutionFinal">
             <summary>
             Stores the final validated A-Star solution, returned from
             the A-Star engine.
            </summary>
             <remarks>This Property is Thread-Safe.</remarks>
        </member>
        <member name="P:AStarInterfaces.AStarAlgorithm.IAStarItem.CanPassOverBlockedAreas">
            <summary>
            Able to pass over blocked areas?
            </summary>
        </member>
        <member name="P:AStarInterfaces.AStarAlgorithm.IAStarItem.IgnoreOccupiedByFlag">
            <summary>
             IgnoreOccupiedBy for PathFinding? - If a unit has this flag set On,
             then the A* will ignore the 'occupiedBy' Status when creating a valid path.
             As the unit moves along the path, any blocking units will move out of the way! 
            </summary>
        </member>
        <member name="P:AStarInterfaces.AStarAlgorithm.IAStarItem.UsePathNodeType">
            <summary>
            Enum to signify a Ground SceneItemOwner or Air SceneItemOwner, for
            the given SceneItem.
            </summary>
        </member>
        <member name="P:AStarInterfaces.AStarAlgorithm.IAStarItem.SetAdjToClosestNode">
             <summary>
             During A-Star solutions, this is checked to determine if the 
             original 'Start' and 'End' nodes should be used; otherwise, if set 'TRUE', 
             the closest node to the 'End' node, from the 'Start' node, will be used.
            </summary>
        </member>
        <member name="T:AStarInterfaces.AStarAlgorithm.NamespaceDoc">
            <summary>
            The <see cref="N:AStarInterfaces.AStarAlgorithm"/> namespace contains the classes
            which make up the entire <see cref="T:AStarInterfaces.AStarAlgorithm.IAStarGraph"/>.
            </summary>
        </member>
        <member name="T:AStarInterfaces.AStarAlgorithm.IAStarGraph">
            <summary>
            <see cref="T:AStarInterfaces.AStarAlgorithm.IAStarGraph"/> is used to store the data relevant to a particular 
            game map; for example, tile costs, occupied references, and unusable blocked
            tiles.  Ultimately, this graph is then read and used during pathfinding searches.
            </summary>
        </member>
        <member name="M:AStarInterfaces.AStarAlgorithm.IAStarGraph.GetPathfindingGraph">
            <summary>
            Returns a List of the internal PathNode items, used primarily
            for the TerrainStorage to save with the current map.
            </summary>
            <returns>Collection of PathNodeforSaving structs</returns>
        </member>
        <member name="M:AStarInterfaces.AStarAlgorithm.IAStarGraph.SetCostToPos(System.Int32,System.Int32,System.Single,System.Int32)">
            <summary>
            Adds Cost data to Graph for current x,y Position and all
            nodes surrounding the current x,y Position, determine by size.
            </summary>
            <param name="x">Graph X-location value.</param>
            <param name="y">Graph Y-location value.</param>
            <param name="cost">Cost to set</param>
            <param name="size">1 or greater; used to fill multiple tiles with same cost</param>
        </member>
        <member name="M:AStarInterfaces.AStarAlgorithm.IAStarGraph.RemoveCostAtPos(System.Int32,System.Int32,System.Int32)">
            <summary>
            Removes Cost data from Graph for current x,y Position and all
            nodes surrounding the current x,y Position, determine by size.
            </summary>
            <param name="inX">Graph X-location value.</param>
            <param name="inY">Graph Y-location value.</param>
            <param name="size">1 or greater; used to fill multiple tiles with same cost</param>
        </member>
        <member name="M:AStarInterfaces.AStarAlgorithm.IAStarGraph.SetOccupiedByToIndex(Microsoft.Xna.Framework.Point@,AStarInterfaces.AStarAlgorithm.Enums.NodeScale,AStarInterfaces.AStarAlgorithm.Enums.PathNodeType,System.Object)">
            <summary>
            Sets OccupiedBy object into Graph for current index given; determine by 'NodeScale'.
            When A* is searching and getting the next 8 successors to a current graphNode, if 
            the Node's OccupiedBy is not Null, it will not be included in the Search.
            This is used for Unit Collision detection as they PathFind accross the Terrain.   
            </summary>
            <param name="index">Graph X/Y index</param>
            <param name="nodeScale">Used to scale given value</param>
            <param name="pathNodeType">PathNodeType; like GroundItem or Air.</param>
            <param name="occupiedBy">Reference to object to save into index position.</param>
            <returns>True/False of success.</returns>
        </member>
        <member name="M:AStarInterfaces.AStarAlgorithm.IAStarGraph.GetOccupantsForRectangle(Microsoft.Xna.Framework.Rectangle@,System.Int32,AStarInterfaces.AStarAlgorithm.Enums.PathNodeType,System.Object[]@,System.Int32@)">
            <summary>
            Given a Rectangle search area, this method will return all 'Occupants' within the search are, where
            they are 'IsAlive', and not of the 'AvoidSceneItem'.  The existing 'Occupants' are populated into the
            given List 'Occupants'.
            </summary>
            <param name="searchRectangle">Search rectangle of the SceneItem's ViewRadius</param>
            <param name="avoidSceneItem">SceneItemNumber to exclude from list</param>
            <param name="pathNodeType">PathNodeType; like GroundItem or Air.</param>
            <param name="occupiants">Array of occupiants.</param>
            <param name="occupiantsFound">Number of occupants found</param>
            <returns>True/False of success.</returns>
        </member>
        <member name="M:AStarInterfaces.AStarAlgorithm.IAStarGraph.GetOccupiedByAtIndex(Microsoft.Xna.Framework.Point@,AStarInterfaces.AStarAlgorithm.Enums.NodeScale,AStarInterfaces.AStarAlgorithm.Enums.PathNodeType,System.Object@)">
            <summary>
            Gets the 'OccupiedBy' item, at the given graph Index position.
            </summary>
            <param name="index">Graph X/Y index</param>
            <param name="nodeScale">Used to scale given value</param>
            <param name="pathNodeType">PathNodeType; like GroundItem or Air.</param>
            <param name="occupiedBy">(OUT) Reference to object</param>
            <returns>True/False of success.</returns>
        </member>
        <member name="M:AStarInterfaces.AStarAlgorithm.IAStarGraph.RemoveOccupiedByAtIndex(Microsoft.Xna.Framework.Point@,AStarInterfaces.AStarAlgorithm.Enums.NodeScale,AStarInterfaces.AStarAlgorithm.Enums.PathNodeType)">
            <summary>
            Removes the reference for a 'OccupiedBy' item, at the given graph Index position.
            </summary>
            <param name="index">Graph X/Y index</param>
            <param name="nodeScale">Used to scale given value</param>
            <param name="pathNodeType">PathNodeType; like GroundItem or Air.</param>
            <returns>True/False of success.</returns>
        </member>
        <member name="M:AStarInterfaces.AStarAlgorithm.IAStarGraph.IsNodeBlocked(AStarInterfaces.AStarAlgorithm.Enums.NodeScale,System.Int32,System.Int32)">
            <summary>
             Checks if Node is Blocked, which means it is not useable; -1 is unaccessable areas, while -2 is blocked by buildings!
            </summary>
            <param name="nodeScale">Used to scale given value</param>
            <param name="x">Graph X-index</param>
            <param name="y">Graph Y-index</param>
            <returns>True/False of success.</returns>
        </member>
        <member name="M:AStarInterfaces.AStarAlgorithm.IAStarGraph.IsNodeBlockedForCursor(AStarInterfaces.AStarAlgorithm.Enums.NodeScale,System.Int32,System.Int32)">
            <summary>
            Only checks for the -1 costs value, which is used to block parts of the map from any access!
            </summary>
            <param name="nodeScale">Used to scale given value</param>
            <param name="x">Graph X-index</param>
            <param name="y">Graph Y-index</param>
            <returns>True/False of success.</returns>
        </member>
        <member name="M:AStarInterfaces.AStarAlgorithm.IAStarGraph.IsPathNodeSectionBlocked(System.Int32,System.Int32,System.Int32,AStarInterfaces.AStarAlgorithm.Enums.BlockedType)">
            <summary>
            Check if all Nodes, within given Size, are Blocked.
            </summary>
            <param name="x">Graph X-index</param>
            <param name="y">Graph Y-index</param>
            <param name="size">Size of area to check, where the Index point becomes the center.</param>
            <param name="blockedType">BlockedType enum value to check for.</param>
            <returns>True/False of success.</returns>
        </member>
        <member name="M:AStarInterfaces.AStarAlgorithm.IAStarGraph.GetNewGoalNodeAtHalfDistance(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets a new GoalNode, which should be roughly half the distance
            of the given node. 
            </summary>
            <param name="oldGoalPosition">Original goal position</param>
            <param name="startPosition">start position</param>
            <param name="newGoalPosition">New half-way goal position</param>
            <returns>True/False of success.</returns>
        </member>
        <member name="M:AStarInterfaces.AStarAlgorithm.IAStarGraph.GetNodeCost(System.Int32,System.Int32,System.Single@)">
            <summary>
            Returns the Node Cost from PathNode Struct at given X/Y index. 
            </summary>
            <param name="x">Graph X-index</param>
            <param name="y">Graph Y-index</param>
            <param name="nodeCost">(OUT) Node cost at given position</param>
        </member>
        <member name="M:AStarInterfaces.AStarAlgorithm.IAStarGraph.IsOccupied(System.Int32,System.Int32,AStarInterfaces.AStarAlgorithm.Enums.PathNodeType)">
            <summary>
            Checks if PathNode X/Y index, is Occupied with Object.
            </summary>
            <param name="x">Graph X-index</param>
            <param name="y">Graph Y-index</param>
            <param name="pathNodeType">PathNodeType; like GroundItem or Air.</param>
            <returns>True/False of success.</returns>
        </member>
        <member name="M:AStarInterfaces.AStarAlgorithm.IAStarGraph.ContainsKey(System.Int32,System.Int32)">
            <summary>
            Checks if the given x/y key is already stored
            in the internal dictionary.
            </summary>
            <param name="x">Graph X-index</param>
            <param name="y">Graph Y-index</param>
            <returns>True/False of success</returns>
        </member>
        <member name="M:AStarInterfaces.AStarAlgorithm.IAStarGraph.LoadAStarGraphBlockingData(System.Collections.Generic.List{AStarInterfaces.AStarAlgorithm.Structs.PathNodeForSaving},System.Int32)">
            <summary>
            Loads the AStarGraph 'BlockingData' back into memory; should be called from the 'TerrainStorageRoutines'
            class when loading.
            </summary>
            <param name="tmpBlockingData">Collection of PathNodeForSaving struct</param>
            <param name="pathNodeStride">PathNodeStride</param>
        </member>
        <member name="M:AStarInterfaces.AStarAlgorithm.IAStarGraph.ClearForLevelReload">
            <summary>
            Clears internal arrays for new levels.
            </summary>
        </member>
        <member name="M:AStarInterfaces.AStarAlgorithm.IAStarGraph.CreatePathfindingGraph">
            <summary>
            Initializes the internal 'Graph' array, to the size
            given in the 'NodeArraySize' Property.  
            </summary>
        </member>
        <member name="P:AStarInterfaces.AStarAlgorithm.IAStarGraph.NodeArraySize">
            <summary>
            Stores the graph's size, or number of nodes in
            the given graph; for example, 57 is 57x57.
            </summary>
        </member>
        <member name="P:AStarInterfaces.AStarAlgorithm.IAStarGraph.NodeStride">
            <summary>
            Stores the Graph's Stride, or distance between
            a tile node.
            </summary>
        </member>
        <member name="T:AStarInterfaces.AStarAlgorithm.Enums.BlockedType">
            <summary>
            Used to signify what state a <see cref="T:AStarInterfaces.AStarAlgorithm.Structs.PathNode"/> is in. 
            </summary>
        </member>
        <member name="F:AStarInterfaces.AStarAlgorithm.Enums.BlockedType.RestrictedArea">
            <summary>
            <see cref="T:AStarInterfaces.AStarAlgorithm.Structs.PathNode"/> is restricted to all scene items; for example, ground and air items.
            </summary>
        </member>
        <member name="F:AStarInterfaces.AStarAlgorithm.Enums.BlockedType.BuildingSceneExist">
            <summary>
            <see cref="T:AStarInterfaces.AStarAlgorithm.Structs.PathNode"/> is restricted to all ground items only.
            </summary>
        </member>
        <member name="F:AStarInterfaces.AStarAlgorithm.Enums.BlockedType.Any">
            <summary>
            <see cref="T:AStarInterfaces.AStarAlgorithm.Structs.PathNode"/> is not restricted to any scene items; ground or air.
            </summary>
        </member>
        <member name="T:AStarInterfaces.AStarAlgorithm.Enums.IgnoreOccupiedBy">
            <summary>
            During the A* search algorithm, scene items determine if <see cref="T:AStarInterfaces.AStarAlgorithm.Structs.PathNode"/> is blocked by checking the 'occupied by' flag;
            however, when this <see cref="T:AStarInterfaces.AStarAlgorithm.Enums.IgnoreOccupiedBy"/> is set to 'On' scene item ignores 'occupied by' state.
            </summary>
        </member>
        <member name="F:AStarInterfaces.AStarAlgorithm.Enums.IgnoreOccupiedBy.On">
            <summary>
            <see cref="T:AStarInterfaces.AStarAlgorithm.Enums.IgnoreOccupiedBy"/> is 'On'.
            </summary>
        </member>
        <member name="F:AStarInterfaces.AStarAlgorithm.Enums.IgnoreOccupiedBy.Off">
            <summary>
             <see cref="T:AStarInterfaces.AStarAlgorithm.Enums.IgnoreOccupiedBy"/> is 'Off'.
            </summary>
        </member>
        <member name="T:AStarInterfaces.AStarAlgorithm.Enums.PathNodeType">
            <summary>
            Signifies the occupied by scene item type as a ground or air item.
            </summary>
        </member>
        <member name="F:AStarInterfaces.AStarAlgorithm.Enums.PathNodeType.GroundItem">
            <summary>
            This is a scene item ground type.
            </summary>
        </member>
        <member name="F:AStarInterfaces.AStarAlgorithm.Enums.PathNodeType.AirItem">
            <summary>
            This is a scene item air type.
            </summary>
        </member>
    </members>
</doc>
